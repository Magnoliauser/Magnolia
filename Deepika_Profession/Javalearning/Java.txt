Important:

2 Class-Method usage
public class Main {
  public void fullThrottle() {
    System.out.println("The car is going as fast as it can!");
  }

  public void speed(int maxSpeed) {
    System.out.println("Max speed is: " + maxSpeed);
  }
}
Second.java
class Second {
  public static void main(String[] args) {
    Main myCar = new Main();     // Create a myCar object
    myCar.fullThrottle();      // Call the fullThrottle() method
    myCar.speed(200);          // Call the speed() method
  }
} 

2 class-variable usage

Main.java
public class Main {
  int x = 5;
}
Second.java
class Second {
  public static void main(String[] args) {
    Main myObj = new Main();
    System.out.println(myObj.x);
  }
}

Combination:

public class Main {y
int x = 5;
  public void fullThrottle() {
    System.out.println("The car is going as fast as it can!");
  }

  public void speed(int maxSpeed) {
    System.out.println("Max speed is: " + maxSpeed);
  }
}
Second.java
class Second {
  public static void main(String[] args) {
    Main myCar = new Main();     // Create a myCar object
    myCar.fullThrottle();      // Call the fullThrottle() method
    myCar.speed(200);          // Call the speed() method
	System.out.println(myCar.x);
	myCar.x = 25;
	System.out.println(myCar.x);
  }
} 

Object Reference:
Reference for variable

public class Main
{
    int run;
    int walk;
	public static void main(String[] args) {
		System.out.println("Hello World");
		
	Main a=new Main();
	Main b=new Main();
	b.run=100;
	b.walk=200;
	a=b;
	System.out.println(a.run);
	System.out.println(a.walk);
	System.out.println(b.run);
	System.out.println(b.walk);
    
	}
	
	(or)
	
	A variable whose type is a class contains a reference to an object of the class 
	(i.e., the address of the memory location where the object is allocated).

Example:

String s;
s = "xxx";
The first statement declares a variable s of type String. Such a variable is not initialized yet.
 The second statement assign to such a variable the reference to the object denoted by "xxx".

Notice that two variables may contain a reference to the same object.

Example:

String s, t;
s = "xxx";
t = s;


Reference for object:

public class Main
{
  int run;
  int walk;
  public static void main (String[]args)
  {
    System.out.println ("Hello World");
    Main a = new Main ();
    Main b = new Main ();
      a.t1 ();
      b = a;
      b.t1 ();
     System.out.println (a.t1()); // t1 is a void method,it doesnot return any value.if it a return method then this syntax is correct
       


  }

  public void t1 ()
  {
    System.out.println ("t1 method");
  }
}


public class Main
{
  int a=10;
  int b=20;
  public static void main (String[]args)
  {
    System.out.println ("Hello World");
    Main a = new Main ();
    
    int c1=50;
    int f=40;
      a.t1 (c1);
      System.out.println (c1);
    System.out.println (f);
      

  }

  public void t1 (int c)
  {
      int d=20;
    
    System.out.println (c);
    System.out.println (d);
    
  }
}

###############

public class Main{
    int p;
    int q;
    int r;
   public static void main(String[] args){
      Main obj=new Main();
      Main deep=new Main();
      obj.p=10;
      obj.q=20;
      obj.r=40;
      
      
      System.out.println("Before swapping, a = " + obj.p + " and b = " + obj.q);
      swapFunction(obj);
      System.out.println("After swapping, a = " + obj.p + " and b is " + obj.q + " r=" +obj.r);
      obj.p=110;
       System.out.println(obj.p);
   }
   public static void swapFunction(Main m) {
      int temp;
      temp=m.p;
      m.p=m.q;
      m.q=temp;
      //System.out.println("After swapping(Inside), a = " + f + " b = " + g);
   }
   
   
}
